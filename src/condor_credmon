#!/usr/bin/python
"""
This CredMon uses the Condor configuration in order to configure itself.
Additional configuration needed is:

- SCITOKEN_PRIVATE_KEY      Location of the PEM formatted Private Key
- SCITOKEN_PRIVATE_KEY_ID   Private key id on the remote host

"""



import os
import sys
import pwd
import logging
from logging import handlers
from datetime import datetime
from subprocess import Popen, PIPE
from functools import partial
import signal
import time
import fnmatch
import glob
try:
    import htcondor
    import scitokens
except:
    htcondor = None
    scitokens = None
    pass
import tempfile
import stat
import traceback


from threading import Event
sleeper = Event()

# Convert .top to *.use
# on worker node:
# .condor_creds directory in execute directory
# $_CONDOR_CREDS points to full path of creds 
# File per module.  For now, only scitokens.  scitokens is just a file with the token
# condor config TOKENS=TRUE on submit and execute
# No credmon on execute machine

def setup_logging(credential_dir):
    """
    Set-up logging for the cred monitor.
    """
    logger = logging.getLogger('credmon')
    logger.setLevel(logging.INFO)
    if htcondor == None:
        log_file = os.path.join(credential_dir, 'credmon.log')
    else:
        log_file = htcondor.param.get('SEC_CREDENTIAL_MONITOR_LOG', '/var/log/condor/credmon.log')
    cred_lfh = handlers.WatchedFileHandler(log_file)
    cred_lfh.setLevel(logging.DEBUG)
    cred_log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    formatter = logging.Formatter(cred_log_fmt)
    cred_lfh.setFormatter(formatter)
    logger.addHandler(cred_lfh)
    return logger

def signal_handler(logger, signum, frame):
    """
    Catch signals. Use SIGHUP as a sleep interrupt.
    Any other signals should exit the program.
    """
    if signum == signal.SIGHUP:
        logger.info('Got SIGHUP: Triggering READ of Credential Directory')
        sleeper.set()
        return
    exit_msg = 'Got signal {0} at frame {1} terminating.'
    logger.info(exit_msg.format(signum, frame))
    sys.exit(0)

def should_renew(base, username):
    """
    Determines the life left in the active SciToken.
    If no active SciToken is found then it returns True.
    If the life left on the SciToken is 60 minutes or less then it
    renews.
    """
    return True

    cc_file = os.path.join(base, '{0}.cc'.format(username))
    if not os.path.exists(cc_file):
        return True
    cc_starttime = datetime.fromtimestamp(os.path.getctime(cc_file))
    time_diff = float((datetime.now() - cc_starttime).seconds)/3600
    if time_diff >= 5:
        return True
    return False



class CredentialMonitor(object):
    """
    SciTokens HTCondor Credential Monitor

    This program periodically or when SIGHUP'd scans the registered
    credential directory for new opaque tokens and when found creates
    a SciToken.

    :param cred_dir: The credential directory to scan.
    :type cred_dir: str
    """

    def __init__(self, cred_dir):
        self.cred_dir = cred_dir
        self.schedd = False
        if htcondor != None:
            self._private_key_location = htcondor.param.get('SCITOKEN_PRIVATE_KEY', None)
            if self._private_key_location != None or os.path.exists(self._private_key_location):
                with open(self._private_key_location, 'r') as private_key:
                    self._private_key = private_key.read()
                self._private_key_id = htcondor.param['SCITOKEN_PRIVATE_KEY_ID']
            self._is_schedd()
        else:
            self._private_key_location = None

        self.log = logging.getLogger('credmon.monitor')
        self.debug = True

    def _is_schedd(self):
        try:
            schedd = htcondor.Schedd()
        except RuntimeError:
            schedd = None
        self.schedd = schedd

    def drop_pid(self):
        """
        Drop a PID file in the cred dir for condor to find.
        """
        curr_pid = os.getpid()
        pid_path = os.path.join(self.cred_dir, "pid")
        with open(pid_path, "w") as pid_fd:
            pid_fd.write("{0}".format(curr_pid))
        return

    def credmon_incomplete(self):
        """
        Start with no CREDMON_COMPLETE
        """
        # Arguably we should check for uptime, but it's just aklog that
        # occurs as a result, so no premature optimisation
        complete_name = os.path.join(self.cred_dir, 'CREDMON_COMPLETE')
        if os.path.isfile(complete_name):
            os.unlink(complete_name)

    def credmon_complete(self):
        """
        Condor expects a CREDMON_COMPLETE empty file to appear after a run.
        """
        complete_name = os.path.join(self.cred_dir, 'CREDMON_COMPLETE')
        with open(complete_name, 'a'):
            os.utime(complete_name, None)
        return

    def atomic_rename(self, tmp_file, target_file):
        """
        If successful HTCondor will only be dealing with fully prepared and
        usable credential cache files.

        :param tmp_file: The temp file path containing
            the TGT acquired from the ngbauth service.
        :type tmp_file: string
        :param target_file: The target file.
        :return: Whether the chmod/rename was successful.
        :rtype: bool
        """
        try:
            os.chmod(tmp_file, stat.S_IRUSR)
            #os.chown(tmp_file, 0, 0)
            os.rename(tmp_file, target_file)
        except OSError as ose:
            self.log.error("Error while atomic renaming: %s", str(ose))
            return False
        return True

    def re_own(self, cred_file, t_uid, t_gid):
        """
        Re-own a file as the uid and gid
        """
        try:
            os.chown(cred_file, t_uid, t_gid)
        except Exception:
            self.log.error('Failed to chown tmp cc file to uid %s', str(t_uid))


    def acquire_scitoken(self, cred_path, username):
        """
        Create the SciToken
        """

        token = scitokens.SciToken(key=self._private_key, key_id=self._private_key_id)
        token.update_claims({'sub': username})
        user_path = os.path.join('/user', username)
        token.update_claims({'scp': ["{}:{}".format(authz, user_path) for authz in ['read', 'write']]})

        # Serialize the token and write it to a file
        serialized_token = token.serialize(issuer="https://scitokens.org/osg-connect", lifetime=60*20)
        (tmp_file_obj, tmp_file) = tempfile.mkstemp(dir=os.path.dirname(cred_path))
        with os.fdopen(tmp_file_obj, "w") as open_file:
            open_file.write(serialized_token.decode("utf-8"))

        target_file = os.path.join(os.path.dirname(cred_path), 'scitokens.use')

        # Rename the tmpfile to the target "scitokens.use" file.
        return self.atomic_rename(tmp_file, target_file)

    def process_cred_file(self, cred_path):
        """
        Split out the file path to get username and base.
        Pass that data to the SciToken acquiring function.

        Format of cred_path should be:
        <cred_dir> / <username> / "scitokens.top"
        """
        # Take the cred_dir out of the cred_path
        cred_path_rm = cred_path.replace(self.cred_dir, '')
        base, _ = os.path.split(cred_path_rm)
        username = os.path.basename(base)
        if should_renew(base, username):
            self.log.info('Found %s, acquiring SciToken and .use file', cred_path)
            success = self.acquire_scitoken(cred_path, username)
            if success:
                self.log.info("Successfully renewed SciToken for user: %s", username)
            else:
                self.log.error("Failed to renew SciToken for user: %s", username)


    def scan_tokens(self):
        """
        Scan the credential directory for new cc files.
        If found then process the TGT request and delete the old cc file.
        """
        top_files = glob.glob(self.cred_dir + '/*/scitokens.top')
        #cc_files = fnmatch.filter(os.listdir(self.cred_dir), '*.cred')
        real_euid = os.geteuid()
        for file_name in top_files:
            # Directory name is the user name
            #cred_path = os.path.join(self.cred_dir, file_name)
            self.process_cred_file(file_name)
        os.seteuid(real_euid)
        # self.remove_dead_creds()
        os.seteuid(real_euid)
        self.credmon_complete()


def main():
    """
    Set-up signal catching and launch the credential monitor.
    """
    if len(sys.argv) > 1:
        credential_dir = sys.argv[1]
    else:
        if htcondor is None:
            credential_dir = '/etc/batch_credds'
        else:
            credential_dir = htcondor.param.get('SEC_CREDENTIAL_DIRECTORY', '/etc/batch_credds')
    logger = setup_logging(credential_dir)
    logger.info('Starting Credmon and registering signals')
    if htcondor is None or scitokens is None:
        logger.info("I think I'm on a worker node because either htcondor or scitokens library was not found")
    signal.signal(signal.SIGHUP, partial(signal_handler, logger))
    signal.signal(signal.SIGTERM, partial(signal_handler, logger))
    signal.signal(signal.SIGINT, partial(signal_handler, logger))
    signal.signal(signal.SIGQUIT, partial(signal_handler, logger))

    credmon = CredentialMonitor(credential_dir)
    credmon.drop_pid()
    credmon.credmon_incomplete()
    logger.info('Entering main loop')
    while True:
        try:
            credmon.scan_tokens()
        except Exception as unknown:
            logger.exception(unknown)
            logger.error(unknown)
        logger.info('Sleeping 60 seconds.')
        sleeper.clear()
        sleeper.wait(60)

if __name__ == '__main__':
    main()
